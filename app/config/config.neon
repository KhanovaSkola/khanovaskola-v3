#
# SECURITY WARNING: it is CRITICAL that this file & directory are NOT accessible directly via a web browser!
#
# If you don't protect this directory from direct web access, anybody will be able to see your passwords.
# http://nette.org/security-warning
#
parameters:
	database:
		driver: postgre
		host: localhost
		charset: utf8
		port: 5432
		sqlmode: TRADITIONAL
	fb:
		pageId: "268941846529405"
	tls: false

php:
	date.timezone: Europe/Prague

nette:
	application:
		errorPresenter: Error
		mapping:
			*: App\Presenters\*\*
	session:
		expiration: 5 years

extensions:
	console: Kdyby\Console\DI\ConsoleExtension
	events: Kdyby\Events\DI\EventsExtension
	facebook: Kdyby\Facebook\DI\FacebookExtension
	google: Kdyby\Google\DI\GoogleExtension
	monolog: Kdyby\Monolog\DI\MonologExtension
	queryPanel: Nextras\TracyQueryPanel\DI\QueryPanelExtension
	rabbitmq: Kdyby\RabbitMq\DI\RabbitMqExtension
	replicator: Kdyby\Replicator\DI\ReplicatorExtension
	version: Clevis\Version\DI\VersionExtension

queryPanel:
	- Nextras\TracyQueryPanel\Handlers\DibiHandler
	- App\Dev\Handlers\ElasticsearchHandler

monolog:
	name: main-site

facebook:
	permissions: [email, user_interests, user_likes, user_education_history]
	graphVersion: v2.1
	tls: %tls%

google:
	returnUri: 'Auth:googleResponse'

events:
	debugger: off
	subscribers:
		- App\Models\Services\CompletedContentCreator

rabbitmq:
	connection:
		host: localhost
		port: 5672
		user: guest
		password: guest
		vhost: /

	producers:
		mail:
			connection: default
			exchange: {name: 'mail', type: direct}
		updateAvatar:
			connection: default
			exchange: {name: 'update-avatar', type: direct}
		updateSchema:
			connection: default
			exchange: {name: 'update-schema', type: direct}
		updateVideo:
			connection: default
			exchange: {name: 'update-video', type: direct}
		blackboardPreview:
			connection: default
			exchange: {name: 'blackboard-preview', type: direct}
		updateVideoChart:
			connection: default
			exchange: {name: 'update-video-chart', type: direct}

	consumers:
		mail:
			connection: default
			exchange: {name: 'mail', type: direct}
			queue: {name: 'mail'}
			callback: [@App\Models\Services\Consumers\Mail, process]
		updateAvatar:
			connection: default
			exchange: {name: 'update-avatar', type: direct}
			queue: {name: 'update-avatar'}
			callback: [@App\Models\Services\Consumers\UpdateAvatar, process]
		updateSchema:
			connection: default
			exchange: {name: 'update-schema', type: direct}
			queue: {name: 'update-schema'}
			callback: [@App\Models\Services\Consumers\UpdateSchema, process]
		updateVideo:
			connection: default
			exchange: {name: 'update-video', type: direct}
			queue: {name: 'update-video'}
			callback: [@App\Models\Services\Consumers\UpdateVideo, process]
		blackboardPreview:
			connection: default
			exchange: {name: 'blackboard-preview', type: direct}
			queue: {name: 'blackboard-preview'}
			callback: [@App\Models\Services\Consumers\BlackboardPreview, process]
		updateVideoChart:
			connection: default
			exchange: {name: 'update-video-chart', type: direct}
			queue: {name: 'update-video-chart'}
			callback: [@App\Models\Services\Consumers\UpdateVideoChart, process]

services:
	- Mikulas\Morphodita\Client
	- Mikulas\Vlna

	- App\Components\Filters
	- App\Models\Rme\UsersRepository
	- App\Models\Services\Acl
	- App\Models\Services\Aes(%aesKey%)
	- App\Models\Services\Authenticator
	- App\Models\Services\BlackboardPreview
	- App\Models\Services\BlueprintPurifier
	- App\Models\Services\Blueprints\Compiler
	- App\Models\Services\Consumers\BlackboardPreview
	- App\Models\Services\Consumers\Mail
	- App\Models\Services\Consumers\UpdateAvatar
	- App\Models\Services\Consumers\UpdateSchema
	- App\Models\Services\Consumers\UpdateVideo
	- App\Models\Services\Consumers\UpdateVideoChart
	- App\Models\Services\Discourse(%discourse.api.key%, %discourse.api.username%)
	- App\Models\Services\DiscoursePurifier
	- App\Models\Services\ElasticSearch(%elastic%, %appDir%)
	- App\Models\Services\Entropy
	- App\Models\Services\Gravatar
	- App\Models\Services\Inflection
	- App\Models\Services\FacebookPage(%fb.pageId%)
	- App\Models\Services\Mailer(%smtp%, %baseUrl%)
	- App\Models\Services\Paths(@container)
	- App\Models\Services\SchemaLayout
	- App\Models\Services\Search
	- App\Models\Services\Srt
	- App\Models\Services\Translator(%appDir%/localization)
	- App\Models\Services\UserMerger
	- App\Models\Services\Youtube

	user: App\Models\Services\UserState

	discourseSso: App\Models\Services\DiscourseSso(%discourse.secret%, %discourse.redirect%)
	reportSso: App\Models\Services\Sso(%report.secret%, %report.redirect%)
	-
		class: App\Models\Services\SsoContainer
		setup:
			- addSso(discourse, @discourseSso)
			- addSso(report, @reportSso)

	subtitleStorage:
		class: App\Models\Services\SubtitleStorage(%tempDir%/subs)
		autowired: false
	- App\Models\Services\SubtitleCache(@subtitleStorage)
	- App\Models\Services\RemoteSubtitles

	purifier: App\Models\Services\HtmlPurifier
	router: App\Config\Router

  # Orm \ Database
	dibiConnection: DibiConnection(%database%)
	orm: App\Models\Orm\RepositoryContainer(@serviceContainerFactory, @container)
	serviceContainerFactory: Clevis\Skeleton\Orm\ServiceContainerFactory(@dibiConnection, @purifier, @performanceHelperCache, @container)
	entityRelationsRegistry: Clevis\Skeleton\Orm\EntityRelationsRegistry
	performanceHelperCache: Nette\Caching\Cache(@cacheStorage, Orm.PerformanceHelper)
